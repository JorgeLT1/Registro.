@page "/pagos"
@page "/pagos/{PagosId:int}"
@inject PagosBLL pagosBLL
@inject PersonaBLL personaBLL
@inject OcupacionesBLL ocupacion
@inject PrestamosBLL prestamosBLL
@inject NotificationService notificationService


<EditForm Model="pagosBLL">
    <div class="accordion-item">
        <div class="modal-header">
            <h1>Registro de Pagos</h1>
        </div>
        <div class="accordion-body">
            <label for="libroid">PagosId</label>
            <div class="input-group">
                <InputNumber @bind-Value="pagos.PagosId" class="form-control" />
                <button type="button" class="btn btn-primary" @onclick="Buscar"><span class="oi oi-magnifying-glass"></span></button>
            </div>

            <br />
            <br />
            <label for="fecha">Fecha</label>
            <InputDate @bind-Value="pagos.Fecha" class="form-control" />
            @if (pagos.Fecha > DateTime.Today)
            {
                <span class="text-danger">La fecha del pago no puede ser en el futuro.</span>
            }
            <br />
            <br />

            <label for="pagos.personaid">Persona ID</label>
            <select @bind="pagos.PersonaId" class="form-control">
                @foreach (var item in personaBLL.GetList())
                {
                    <option value="@item.PersonaId">@item.PersonaId</option>
                }
            </select>
            <br />
            <br />

            <label for="concepto">Concepto</label>
            <InputText @bind-Value="pagos.Concepto" class="form-control" />
            @if (string.IsNullOrEmpty(pagos.Concepto))
            {
                <span class="text-danger">El concepto del pago es obligatorio.</span>
            }
            <br />
            <br />

            <label for="monto">Monto</label>
            <InputNumber @bind-Value="pagos.Monto" class="form-control" />
            @if (pagos.Monto <= 0 || pagos.Monto > 500000)
            {
                <span class="text-danger">El monto del pago debe estar entre 1 y 500000.</span>
            }
            <br />
            <br />
            <div class="card">
            <div class="card-header">
                <h1> Detalle de pago </h1>
            </div>


            <div class="form-group">
                <label>PrestamoId: </label><br>
                <InputSelect class="form-select" @bind-Value="detalle.prestamosid">
                    @foreach (var prestamo in prestamosBLL.GetList(o => o.personaid == pagos.PersonaId))
                    {
                        <option value="@prestamo.PrestamosId">@prestamo.concepto</option>
                    }
                </InputSelect>
            </div>

                <div class="col-4">
                    <label for="txtValorPagado" class="form-label"> Valor Pagado:</label>
                </div>

                <div class="input-group">
                    <input type="number"  id="txtValorPagado" class="form-control" @bind-value="detalle.valorPagado">
                    <ValidationMessage For="@(() => detalle.valorPagado)" />
                    <button type="button"class="btn btn-success" @onclick="AgregarDetalle" ><span class="oi oi-plus"></span></button>
                </div>
        </div>
                <table class="table">
            <thead>
                <tr>
                    <th>Id</th>
                    <th>PrestamoID</th>
                    <th>Valor Pagado</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>               
                    @if(pagos.pagosDetalles!=null){
                        @foreach (var detalle in pagos.pagosDetalles)
                        {
                            <tr>
                                <td>@detalle.id</td>
                                <td>@detalle.prestamosid</td>
                                <td>@detalle.valorPagado</td>
                                <td> 
                            </td>
                            
                            </tr>
                         }

                    }
                            
            </tbody>
        </table>
        <hr>
        <div class="text-center">
            <button type="button" class="btn btn-primary" @onclick="Nuevo"> <span class="oi oi-file"></span> Nuevo </button>
            <button type="button" class="btn btn-success" @onclick="Guardar"><span class="oi oi-document"></span> Guardar</button>
            <button type="button" class="btn btn-danger" @onclick="Eliminar"><span class="oi oi-delete"></span> Eliminar</button>
        </div>



    </div>
 </div>

</EditForm>

@code {

    [Parameter]
    public int PagosId {get; set; }
    public Pagos pagos {get; set; } = new Pagos();
    public PagosDetalle detalle {get; set;} = new PagosDetalle();
          
    protected override void OnInitialized()
    {
        if(PagosId > 0)
        {
            this.pagos.PagosId = PagosId;
            this.Buscar();
        }
    } 
    public void Buscar()
    {
        if (pagos.PagosId > 0)
        {
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Se ha encontrado con exito."
                    });
            var encontrado = pagosBLL.Buscar(pagos.PagosId);
            Nuevo();
            if (encontrado != null)
                this.pagos = encontrado;
        }
    }

    public void Nuevo()
    {
        this.pagos = new Pagos();
    }

    public void Guardar()
    {
        var guardado = pagosBLL.Guardar(pagos);
        
        if (guardado)
        {
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Guardado con exito."
                    });
            Nuevo();
        }
        else
        {
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "ERROR!!. Favor revisar los campos."
                    });
            Nuevo();
        }
    }

    public void Eliminar()
    {
        if(pagosBLL.Eliminar(pagos))
        {
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Success,
                        Summary = "Se ha eliminado con exito."
                    });
            Nuevo();
        }
        else
        {
            ShowNotification(
                new NotificationMessage
                    {
                        Severity = NotificationSeverity.Error,
                        Summary = "ERROR!!. Favor revisar los campos."
                    });
            Nuevo();
        }
    }
    void AgregarDetalle()
    {
            pagos.pagosDetalles.Add(detalle);
            detalle = new PagosDetalle();

            ShowNotification(
            new NotificationMessage
                {
                    Severity = NotificationSeverity.Success,
                    Summary = "Guardado Correctamente"
                });  
    }

     
    public void ShowNotification(NotificationMessage message)
    {
        notificationService.Notify(message);
    }


}

